# -*- coding: utf-8 -*-
"""Bankga mijozlarining qarzni qaytarish prognozi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D8DzlGpsd2--PrBRR39lq5XP8fn1S39C
"""

import zipfile
import os

zip_path = "/content/binaryclassificationwithabankchurndataset (2).zip"
extract_folder = "/content/bank_data"


with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_folder)


os.listdir(extract_folder)

import pandas as pd

train_df = pd.read_csv('/content/bank_data/train.csv')
train_df.head()



test_df = pd.read_csv('/content/bank_data/test.csv')
sample_sub_df = pd.read_csv('/content/bank_data/sample_submission.csv')
test_df.head()

train_path = '/content/bank_data/train.csv'
df = pd.read_csv(train_path)

df.head()

df.columns



# Kerakli kutubxonalar

import pandas as pd
import numpy as np
import torch
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns
from fastai.tabular.all import *
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.pipeline import Pipeline
from sklearn import metrics

df = pd.read_csv('/content/bank_data/train.csv')
df.head()

df.shape

df.info()

df.describe()

df['Exited'].value_counts()/len(df)*100

Exited_rate = df['Exited'].value_counts()/len(df)*100

plt.figure(figsize=(5,5))
plt.pie(Exited_rate, labels=['Beradi','Bermaydi'])
plt.show()

fig, axes = plt.subplots(1,3, figsize=(15,5))

# Tenure
sns.histplot(x="Tenure", data=df, ax=axes[0])
axes[0].set_title("Muddati")

# EstimateSalary
sns.histplot(x="EstimatedSalary", data=df, ax=axes[0])
axes[0].set_title("ish haqini taxmin qilish")

# CreditScore
sns.histplot(x="CreditScore", data=df, ax=axes[2])
axes[2].set_title("Kredit ballari")

plt.show()

df_numeric=df.select_dtypes(include=['number'])
df_numeric.corrwith(df['Exited']).abs().sort_values(ascending=False)

#df dagi mavjud bo'lmagan qiymatlar soni
print(f"Mavjud bo'lmagan qiymatlar soni: {df.isnull().sum().sum()}")

#mavjud bo'lmagan qatorlar soni
missing_rows = df[df.isnull().any(axis=1)].shape[0]
print(f"Mavjud bo'lmagan qatorlar soni: {missing_rows}")

#qatorlar nisbati
print(f"Mavjud bo'lmagan qatorlar %: {np.round(missing_rows/len(df)*100)}%")

"""ML ga tayyorgarlik

"""

# Matnli ustunlarni songa o'tkazamiz
encoded = pd.get_dummies(df)
encoded = encoded.astype(int)
encoded.head()

X = encoded.drop("Exited", axis=1)
y = encoded['Exited']

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, stratify=y, random_state=0)

"""ML. Logistic Regression"""

# Modelni yaratamiz (training)
LR_model = LogisticRegression()
LR_model.fit(X_train, y_train)

# Modelni baholaymiz
y_pred = LR_model.predict(X_test)
print(metrics.classification_report(y_test, y_pred))
print("Model aniqligi:", metrics.accuracy_score(y_test,y_pred))

# Confusion Matrix
conf_mat = metrics.confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True,fmt="g")
plt.show()

"""Random Forest"""

# Random Forest modelini yaratish
rf_model = RandomForestClassifier(random_state=42)


# modelni o'qitamiz
rf_model.fit(X_train, y_train)

# Bashorat
y_pred = rf_model.predict(X_test)

# Aniqlil
print("Aniqlik:", accuracy_score(y_test, y_pred))

# Classification report
print("Classification report:", classification_report(y_test, y_pred))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", )
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# ROC Curve
fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred)
roc_auc = metrics.auc(fpr, tpr)
display = metrics.RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc, estimator_name='ROC curve')
display.plot()
plt.show()

























